"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[4484],{28453:(e,o,r)=>{r.d(o,{R:()=>s,x:()=>n});var t=r(96540);const a={},i=t.createContext(a);function s(e){const o=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function n(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:o},e.children)}},95143:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>l,contentTitle:()=>n,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"projectariatools/overview","title":"Project Aria Tools Overview","description":"projectaria-tools is the official library for accessing and processing data recorded by Project Aria glasses.","source":"@site/docs-research-tools/projectariatools/overview.mdx","sourceDirName":"projectariatools","slug":"/projectariatools/overview","permalink":"/projectaria_tools/gen2/research-tools/projectariatools/overview","draft":false,"unlisted":false,"editUrl":"https://www.internalfb.com/code/fbsource/arvr/projects/ariane/aria_research_kit/projectaria_tools/website/docs-research-tools/projectariatools/overview.mdx","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0,"title":"Project Aria Tools Overview"},"sidebar":"researchToolsSidebar","previous":{"title":"Open Science Initiative (OSI)","permalink":"/projectaria_tools/gen2/research-tools/"},"next":{"title":"Installation","permalink":"/projectaria_tools/gen2/research-tools/projectariatools/installation"}}');var a=r(74848),i=r(28453);const s={sidebar_position:0,title:"Project Aria Tools Overview"},n="Project Aria Tools",l={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Python Notebook Tutorials",id:"python-notebook-tutorials",level:2},{value:"Visualization Tools",id:"visualization-tools",level:2}];function d(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.header,{children:(0,a.jsx)(o.h1,{id:"project-aria-tools",children:"Project Aria Tools"})}),"\n",(0,a.jsxs)(o.p,{children:[(0,a.jsx)(o.code,{children:"projectaria-tools"})," is the official library for accessing and processing data recorded by ",(0,a.jsx)(o.strong,{children:"Project Aria glasses"}),".\nIt provides a unified interface to load VRS files and access all associated sensor and machine perception data through high-level, easy-to-use APIs.\nThe library supports efficient operations such as random access, timestamp-based queries, and synchronized multi-sensor data retrieval, with a consistent set of ",(0,a.jsx)(o.strong,{children:"C++ and Python APIs"})," seamlessly bridged via Pybind11."]}),"\n",(0,a.jsxs)(o.p,{children:["Project Aria glasses record its data in ",(0,a.jsx)(o.strong,{children:"VRS"})," (Visual Recordings System) format, which is a general-purpose recording format from Meta.\nProperly interpreting Project Aria VRS requires detailed understanding of the device\u2019s sensor configurations, calibration models, and on-device perception outputs.\n",(0,a.jsx)(o.code,{children:"projectaria-tools"})," abstracts these complexities, ensuring that all data is correctly parsed, aligned, and represented for research and development workflows."]}),"\n",(0,a.jsx)(o.p,{children:"In addition to data access, the library includes visualization and conversion utilities that allow users to inspect and export selected streams to standard formats such as CSV and MP4, making it easier to analyze and share Aria data across diverse toolchains."}),"\n",(0,a.jsx)(o.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,a.jsxs)(o.p,{children:["If you're new to ",(0,a.jsx)(o.code,{children:"projectaria-tools"}),", start here:"]}),"\n",(0,a.jsxs)(o.ul,{children:["\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.strong,{children:(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/installation",children:"Quick Start Installation Guide"})})," - Learn how to install ",(0,a.jsx)(o.code,{children:"projectaria-tools"})," on your system"]}),"\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.strong,{children:(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/advanced-installation",children:"Advanced Installation"})})," - Advanced installation options and configurations"]}),"\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.strong,{children:(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/advanced-installation-pixi",children:"Pixi Installation"})})," - Install using Pixi package manager"]}),"\n"]}),"\n",(0,a.jsx)(o.h2,{id:"python-notebook-tutorials",children:"Python Notebook Tutorials"}),"\n",(0,a.jsx)(o.p,{children:"Explore our comprehensive Python tutorials to learn how to work with Aria data:"}),"\n",(0,a.jsxs)(o.ul,{children:["\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/pythontutorials/dataprovider",children:"Tutorial 1: VrsDataProvider Basics"}),": how to perform basic operations in loading and access data in an Aria VRS file."]}),"\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/pythontutorials/calibration",children:"Tutorial 2: Device Calibration"}),": how to work with device calibration in Aria VRS."]}),"\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/pythontutorials/queue",children:"Tutorial 3: Queued Sensor Data"}),": how to use the unified queued API to efficiently \u201cstream\u201d multi-sensor data."]}),"\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/pythontutorials/eyetracking-handtracking",children:"Tutorial 4: On-Device Eye Tracking and Hand Tracking"}),": how to work with on-device-generated EyeGaze and Hand-tracking signals from Aria Gen2 glasses."]}),"\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/pythontutorials/vio",children:"Tutorial 5: On-Device VIO"}),": how to work with on-device-generated VIO data from Aria Gen2 glasses."]}),"\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/pythontutorials/time-sync",children:"Tutorial 6: Timestamp Mapping in Single- and Multi-Device Recordings"}),": understanding timestamp mapping in Aria data, and how to use timestamp mapping in multi-device recording."]}),"\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/pythontutorials/mps",children:"Tutorial 7: Machine Perception Services (MPS) Data Loading"}),": how to load and visualize output data from Aria MP."]}),"\n"]}),"\n",(0,a.jsx)(o.h2,{id:"visualization-tools",children:"Visualization Tools"}),"\n",(0,a.jsx)(o.p,{children:"Tools for visualizing and exploring Aria data:"}),"\n",(0,a.jsxs)(o.ul,{children:["\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.strong,{children:(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/tools/pythonviz",children:"Python Visualization"})})," - Python-based visualization"]}),"\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.strong,{children:(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/tools/cppviz",children:"C++ Visualization"})})," - C++ visualization tool"]}),"\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.strong,{children:(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/tools/vrstomp4",children:"VRS to MP4"})})," - Convert VRS recordings to MP4 video"]}),"\n",(0,a.jsxs)(o.li,{children:[(0,a.jsx)(o.strong,{children:(0,a.jsx)(o.a,{href:"/projectaria_tools/gen2/research-tools/projectariatools/tools/exportcsv",children:"Export to CSV"})})," - Export sensor data to CSV format"]}),"\n"]})]})}function h(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,a.jsx)(o,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);