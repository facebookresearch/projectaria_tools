"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[9539],{28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>d});var i=r(96540);const o={},t=i.createContext(o);function s(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(t.Provider,{value:n},e.children)}},46466:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"client-sdk/python-sdk/recording-example","title":"Recording Example","description":"This example demonstrates how to programmatically control recording on your Aria Gen2 device using the Python SDK. You\'ll learn how to start recordings, stop them, and download the captured data to your local machine.","source":"@site/docs-ark/client-sdk/python-sdk/recording-example.mdx","sourceDirName":"client-sdk/python-sdk","slug":"/client-sdk/python-sdk/recording-example","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/recording-example","draft":false,"unlisted":false,"editUrl":"https://www.internalfb.com/code/fbsource/arvr/projects/ariane/aria_research_kit/projectaria_tools/website/docs-ark/client-sdk/python-sdk/recording-example.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Recording Example"},"sidebar":"arkSidebar","previous":{"title":"Connection Example","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/connection-example"},"next":{"title":"Streaming Example","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/streaming-example"}}');var o=r(74848),t=r(28453);const s={sidebar_position:3,title:"Recording Example"},d="Recording Example",c={},l=[{value:"Quick Start",id:"quick-start",level:2},{value:"What This Example Does",id:"what-this-example-does",level:2},{value:"Code Walkthrough",id:"code-walkthrough",level:2},{value:"Step 1: Import Required Modules",id:"step-1-import-required-modules",level:3},{value:"Step 2: Parse Command-Line Arguments",id:"step-2-parse-command-line-arguments",level:3},{value:"Step 3: Connect to Device",id:"step-3-connect-to-device",level:3},{value:"Step 4: Configure Recording",id:"step-4-configure-recording",level:3},{value:"Step 5: Start Recording",id:"step-5-start-recording",level:3},{value:"Step 6: Stop Recording",id:"step-6-stop-recording",level:3},{value:"Step 7: List Recordings",id:"step-7-list-recordings",level:3},{value:"Step 8: Download Recording",id:"step-8-download-recording",level:3},{value:"Complete Example Code",id:"complete-example-code",level:2},{value:"Recording Profiles",id:"recording-profiles",level:2},{value:"Working with Downloaded Recordings",id:"working-with-downloaded-recordings",level:2},{value:"Visualize VRS Files",id:"visualize-vrs-files",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Recording Won&#39;t Start",id:"recording-wont-start",level:3},{value:"Next Steps",id:"next-steps",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"recording-example",children:"Recording Example"})}),"\n",(0,o.jsx)(n.p,{children:"This example demonstrates how to programmatically control recording on your Aria Gen2 device using the Python SDK. You'll learn how to start recordings, stop them, and download the captured data to your local machine."}),"\n",(0,o.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,o.jsx)(n.p,{children:"Run the recording example script:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"python ~/Downloads/projectaria_client_sdk_samples_gen2/device_record.py\n"})}),"\n",(0,o.jsx)(n.p,{children:"The script will start a recording, wait for user input to stop, then download the recording."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"what-this-example-does",children:"What This Example Does"}),"\n",(0,o.jsx)(n.p,{children:"The script performs the following operations:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Connects to the device"}),"\n",(0,o.jsx)(n.li,{children:"Configures recording settings (profile, name)"}),"\n",(0,o.jsx)(n.li,{children:"Starts recording on the device"}),"\n",(0,o.jsx)(n.li,{children:"Waits for user to press Enter to stop"}),"\n",(0,o.jsx)(n.li,{children:"Stops the recording"}),"\n",(0,o.jsx)(n.li,{children:"Lists available recordings"}),"\n",(0,o.jsx)(n.li,{children:"Downloads the most recent recording to your local machine"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"code-walkthrough",children:"Code Walkthrough"}),"\n",(0,o.jsx)(n.h3,{id:"step-1-import-required-modules",children:"Step 1: Import Required Modules"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import argparse\nimport time\nimport aria.sdk_gen2 as sdk_gen2\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"step-2-parse-command-line-arguments",children:"Step 2: Parse Command-Line Arguments"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def parse_args() -> argparse.Namespace:\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        "--output",\n        dest="output_path",\n        type=str,\n        default="",\n        required=False,\n        help="Output directory to save the recording",\n    )\n    parser.add_argument(\n        "--duration",\n        dest="duration",\n        type=int,\n        default=10,\n        required=False,\n        help="Recording duration in seconds (default: 10)",\n    )\n    return parser.parse_args()\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Available Options:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--duration"}),": Duration of the recording"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--output"}),": Directory where the recording will be downloaded"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"step-3-connect-to-device",children:"Step 3: Connect to Device"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'device_client = sdk_gen2.DeviceClient()\nconfig = sdk_gen2.DeviceClientConfig()\ndevice_client.set_client_config(config)\n\ntry:\n    device = device_client.connect()\n    print(f"Successfully connected to device {device.connection_id()}")\nexcept Exception:\n    print("Failed to connect to device and record")\n    return\n'})}),"\n",(0,o.jsx)(n.p,{children:"This establishes a connection to the first available device."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"step-4-configure-recording",children:"Step 4: Configure Recording"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'recording_config = sdk_gen2.RecordingConfig()\nrecording_config.recording_name = "example_recording"\nrecording_config.profile_name = "profile9"\ndevice.set_recording_config(recording_config)\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"RecordingConfig Options:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"profile_name"}),": The sensor configuration profile (",(0,o.jsx)(n.code,{children:"profile8"}),", ",(0,o.jsx)(n.code,{children:"profile10"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"recording_name"}),": A descriptive name for your recording"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For profile details, see the ",(0,o.jsx)(n.a,{href:"/technical-specs/device/profile",children:"Profiles Technical Specification"}),"."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"step-5-start-recording",children:"Step 5: Start Recording"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'uuid = device.start_recording()\nprint(f"Start recording for {duration} seconds with uuid: {uuid}")\nprint("Recording started. Press Enter to stop recording...")\ninput()\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"What happens:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"start_recording()"})," begins capturing sensor data on the device"]}),"\n",(0,o.jsxs)(n.li,{children:["The recording continues until ",(0,o.jsx)(n.code,{children:"stop_recording()"})," is called"]}),"\n",(0,o.jsx)(n.li,{children:"Data is stored on the device's internal storage"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"step-6-stop-recording",children:"Step 6: Stop Recording"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'print("Stopping recording...")\ndevice.stop_recording()\nprint("Recording stopped")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"stop_recording()"})," method stops data capture and saves the recording with a unique UUID."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"step-7-list-recordings",children:"Step 7: List Recordings"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"device.list_recordings()\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"step-8-download-recording",children:"Step 8: Download Recording"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"device.download_recording(uuid=uuid, output_path=output_path)\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Recording Information:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"uuid"}),": Unique identifier for the recording"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Download Process:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"download_recording(uuid, output_path)"})," downloads the recording from device to PC"]}),"\n",(0,o.jsx)(n.li,{children:"Downloaded files are in VRS format"}),"\n",(0,o.jsx)(n.li,{children:"Download time depends on recording size"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"complete-example-code",children:"Complete Example Code"}),"\n",(0,o.jsx)(n.p,{children:"Here's the full recording script:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import argparse\nimport time\nimport aria.sdk_gen2 as sdk_gen2\n\ndef device_record(duration, output_path):\n    device_client = sdk_gen2.DeviceClient()\n    config = sdk_gen2.DeviceClientConfig()\n    device_client.set_client_config(config)\n\n    # try to connect to the device\n    try:\n        device = device_client.connect()\n        print(f"Successfully connected to device {device.connection_id()}")\n\n        # Set recording config with profile name\n        print("Setup recording config")\n        recording_config = sdk_gen2.RecordingConfig()\n        recording_config.recording_name = "example_recording"\n        recording_config.profile_name = "profile9"\n        device.set_recording_config(recording_config)\n\n        # Start and stop recording\n        uuid = device.start_recording()\n        print(f"Start recording for {duration} seconds with uuid: {uuid}")\n        time.sleep(duration)\n        device.stop_recording()\n\n        # list existing recordings on device\n        print("List recordings")\n        device.list_recordings()\n\n        # download all recordings\n        print(f"Download recordings {uuid}")\n        device.download_recording(uuid=uuid, output_path=output_path)\n    except Exception:\n        print("Failed to connect to device and record")\n        return\n\n\ndef parse_args() -> argparse.Namespace:\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        "--output",\n        dest="output_path",\n        type=str,\n        default="",\n        required=False,\n        help="Output directory to save the recording",\n    )\n    parser.add_argument(\n        "--duration",\n        dest="duration",\n        type=int,\n        default=10,\n        required=False,\n        help="Recording duration in seconds (default: 10)",\n    )\n    return parser.parse_args()\n\n\nif __name__ == "__main__":\n    args = parse_args()\n    device_record(args.duration, args.output_path)\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"recording-profiles",children:"Recording Profiles"}),"\n",(0,o.jsxs)(n.p,{children:["For complete profile specifications, see the ",(0,o.jsx)(n.a,{href:"/technical-specs/device/profile",children:"Profiles Technical Specification"}),"."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"working-with-downloaded-recordings",children:"Working with Downloaded Recordings"}),"\n",(0,o.jsx)(n.h3,{id:"visualize-vrs-files",children:"Visualize VRS Files"}),"\n",(0,o.jsx)(n.p,{children:"After downloading, visualize recordings using the viewer:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"aria_rerun_viewer --vrs ~/Documents/recordings/<recording_name>.vrs\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For more on data processing, see the ",(0,o.jsx)(n.a,{href:"https://facebookresearch.github.io/projectaria_tools/",children:"Project Aria Tools documentation"}),"."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.h3,{id:"recording-wont-start",children:"Recording Won't Start"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem:"})," ",(0,o.jsx)(n.code,{children:"start_recording()"})," fails or hangs."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Check device connection:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"device = device_client.connect()\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Stop existing recording:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"device.stop_recording()\ntime.sleep(2)\ndevice.start_recording()\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Learn about ",(0,o.jsx)(n.a,{href:"/ark/client-sdk/python-sdk/streaming-example",children:"real-time streaming"})," for live data access"]}),"\n",(0,o.jsxs)(n.li,{children:["Send ",(0,o.jsx)(n.a,{href:"/ark/client-sdk/python-sdk/text-to-speech-example",children:"text-to-speech commands"})," to the device"]}),"\n",(0,o.jsxs)(n.li,{children:["Review ",(0,o.jsx)(n.a,{href:"/ark/client-sdk/python-sdk/python-interface",children:"all Python SDK examples"})]}),"\n",(0,o.jsxs)(n.li,{children:["Explore ",(0,o.jsx)(n.a,{href:"/ark/mps/start",children:"Machine Perception Services"})," for offline processing"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);