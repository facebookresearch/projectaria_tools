"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[6946],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var c=i(96540);const s={},t=c.createContext(s);function r(e){const n=c.useContext(t);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),c.createElement(t.Provider,{value:n},e.children)}},69206:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>a});const c=JSON.parse('{"id":"client-sdk/python-sdk/connection-example","title":"Connection Example","description":"This example demonstrates how to establish a connection to your Aria Gen2 device using the Python SDK. Once authenticated, you can connect to devices by their serial number or IP address.","source":"@site/docs-ark/client-sdk/python-sdk/connection-example.mdx","sourceDirName":"client-sdk/python-sdk","slug":"/client-sdk/python-sdk/connection-example","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/connection-example","draft":false,"unlisted":false,"editUrl":"https://www.internalfb.com/code/fbsource/arvr/projects/ariane/aria_research_kit/projectaria_tools/website/docs-ark/client-sdk/python-sdk/connection-example.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Connection Example"},"sidebar":"arkSidebar","previous":{"title":"Authentication Example","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/auth-example"},"next":{"title":"Recording Example","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/recording-example"}}');var s=i(74848),t=i(28453);const r={sidebar_position:2,title:"Connection Example"},l="Connection Example",o={},a=[{value:"Quick Start",id:"quick-start",level:2},{value:"What This Example Does",id:"what-this-example-does",level:2},{value:"Code Walkthrough",id:"code-walkthrough",level:2},{value:"Step 1: Import Required Modules",id:"step-1-import-required-modules",level:3},{value:"Step 2: Parse Command-Line Arguments",id:"step-2-parse-command-line-arguments",level:3},{value:"Step 3: Create and Configure Device Client",id:"step-3-create-and-configure-device-client",level:3},{value:"Step 4: Establish Connection",id:"step-4-establish-connection",level:3},{value:"Complete Example Code",id:"complete-example-code",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Connect to First Available Device",id:"connect-to-first-available-device",level:3},{value:"Connect by Serial Number",id:"connect-by-serial-number",level:3},{value:"Finding Device Information",id:"finding-device-information",level:2},{value:"Get Device Serial Number",id:"get-device-serial-number",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Connection Failed: Device Not Found",id:"connection-failed-device-not-found",level:3},{value:"Connection Failed: Wrong Serial Number",id:"connection-failed-wrong-serial-number",level:3},{value:"Connection Modes",id:"connection-modes",level:2},{value:"USB Connection (Default)",id:"usb-connection-default",level:3},{value:"Key Concepts",id:"key-concepts",level:2},{value:"DeviceClientConfig",id:"deviceclientconfig",level:3},{value:"Device Object",id:"device-object",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"connection-example",children:"Connection Example"})}),"\n",(0,s.jsx)(n.p,{children:"This example demonstrates how to establish a connection to your Aria Gen2 device using the Python SDK. Once authenticated, you can connect to devices by their serial number or IP address."}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(n.p,{children:"Run the connection example script:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python ~/Downloads/projectaria_client_sdk_samples_gen2/device_connect.py\n"})}),"\n",(0,s.jsx)(n.p,{children:"The script connects to the first available device and displays its information."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"what-this-example-does",children:"What This Example Does"}),"\n",(0,s.jsx)(n.p,{children:"The script performs the following steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Creates a device client"}),"\n",(0,s.jsx)(n.li,{children:"Configures the client to connect to a specific device (or first available)"}),"\n",(0,s.jsx)(n.li,{children:"Establishes a connection"}),"\n",(0,s.jsx)(n.li,{children:"Displays device information"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"code-walkthrough",children:"Code Walkthrough"}),"\n",(0,s.jsx)(n.h3,{id:"step-1-import-required-modules",children:"Step 1: Import Required Modules"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import argparse\nimport aria.sdk_gen2 as sdk_gen2\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-2-parse-command-line-arguments",children:"Step 2: Parse Command-Line Arguments"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def parse_args() -> argparse.Namespace:\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        "--serial",\n        dest="serial",\n        type=str,\n        default="",\n        required=False,\n        help="Serial number of the device which will be connected. (e.g. 1M0YDB5H7B0020)",\n    )\n    return parser.parse_args()\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Available Options:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--serial"}),": Specify a device by its serial number (e.g., ",(0,s.jsx)(n.code,{children:"1M0YDB5H7B0020"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"If nothing is specified, connects to the first available device"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-3-create-and-configure-device-client",children:"Step 3: Create and Configure Device Client"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"device_client = sdk_gen2.DeviceClient()\nconfig = sdk_gen2.DeviceClientConfig()\n\nconfig.device_serial = serial\n\ndevice_client.set_client_config(config)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"How Configuration Works:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default (no arguments)"}),": Connects to the first available device"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"By Serial"}),": Targets a specific device by its unique serial number"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-4-establish-connection",children:"Step 4: Establish Connection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'try:\n    device = device_client.connect()\n    print(f"Successfully connected to device {device.connection_id()}")\nexcept Exception as e:\n    print(f"Failed to connect to device: {e}")\n    return\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"What Happens:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"connect()"})," method establishes a session with the device"]}),"\n",(0,s.jsxs)(n.li,{children:["Returns a ",(0,s.jsx)(n.code,{children:"Device"})," object that provides access to all device features"]}),"\n",(0,s.jsx)(n.li,{children:"Throws an exception if connection fails"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"complete-example-code",children:"Complete Example Code"}),"\n",(0,s.jsx)(n.p,{children:"Here's the full connection script:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import argparse\nimport aria.sdk_gen2 as sdk_gen2\n\ndef device_connect(serial):\n    # Set up the device client to initiate connection to the device\n    device_client = sdk_gen2.DeviceClient()\n    # Set up the device client config to specify the device to be connected to e.g. device serial number.\n    # If nothing is specified, the first device in the list of connected devices will be connected to\n    config = sdk_gen2.DeviceClientConfig()\n    config.device_serial = serial\n    device_client.set_client_config(config)\n\n    # try to connect to the device\n    try:\n        device = device_client.connect()\n        print(f"Successfully connected to device {device.connection_id()}")\n    except Exception:\n        print("Failed to connect to device.")\n\n\ndef parse_args() -> argparse.Namespace:\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        "--serial",\n        dest="serial",\n        type=str,\n        default="",\n        required=False,\n        help="Serial number of the device which will be connected. (e.g. 1M0YDB5H7B0020)",\n    )\n\n    return parser.parse_args()\n\nif __name__ == "__main__":\n    args = parse_args()\n    device_connect(args.serial)\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(n.h3,{id:"connect-to-first-available-device",children:"Connect to First Available Device"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python ~/Downloads/projectaria_client_sdk_samples_gen2/device_connect.py\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Successfully connected to device 1M0YDB5H7B0020\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"connect-by-serial-number",children:"Connect by Serial Number"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python ~/Downloads/projectaria_client_sdk_samples_gen2/device_connect.py --serial 1M0YDB5H7B0020\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"When to Use:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Multiple devices are connected"}),"\n",(0,s.jsx)(n.li,{children:"You need to ensure you're using a specific device"}),"\n",(0,s.jsx)(n.li,{children:"Scripts that require consistent device selection"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"finding-device-information",children:"Finding Device Information"}),"\n",(0,s.jsx)(n.h3,{id:"get-device-serial-number",children:"Get Device Serial Number"}),"\n",(0,s.jsx)(n.p,{children:"Use the CLI to list all available devices:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"aria-gen2 device list\n\n# Output example:\n# [AriaGen2Cli:App][INFO]: 1M0YDB5H7B0020\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"connection-failed-device-not-found",children:"Connection Failed: Device Not Found"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," Script cannot find or connect to the device."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Check device is connected:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"aria-gen2 device list\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Verify authentication:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"aria-gen2 auth check\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Run aria-doctor:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"aria-doctor\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Check USB connection:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Try a different USB port"}),"\n",(0,s.jsx)(n.li,{children:"Use a high-quality USB cable"}),"\n",(0,s.jsx)(n.li,{children:"Ensure device is powered on"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"connection-failed-wrong-serial-number",children:"Connection Failed: Wrong Serial Number"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem:"})," Specified serial number doesn't match any device."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["List available devices:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"aria-gen2 device list\n"})}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Use the correct serial number from the output"}),"\n",(0,s.jsx)(n.li,{children:"Serial numbers are case-sensitive"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"connection-modes",children:"Connection Modes"}),"\n",(0,s.jsx)(n.h3,{id:"usb-connection-default",children:"USB Connection (Default)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Device connected via USB cable"}),"\n",(0,s.jsx)(n.li,{children:"Most reliable connection method"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Connects via USB to first available device\nconfig = sdk_gen2.DeviceClientConfig()\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsx)(n.h3,{id:"deviceclientconfig",children:"DeviceClientConfig"}),"\n",(0,s.jsx)(n.p,{children:"The configuration object controls how the client connects to devices:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'config = sdk_gen2.DeviceClientConfig()\n\n# Option 1: Connect to first available device (default)\n# Leave config empty\n\n# Option 2: Connect by serial number\nconfig.device_serial = "1M0YDB5H7B0020"\n\n# Apply configuration\ndevice_client.set_client_config(config)\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"device-object",children:"Device Object"}),"\n",(0,s.jsxs)(n.p,{children:["Once connected, the ",(0,s.jsx)(n.code,{children:"Device"})," object provides:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"device = device_client.connect()\n\n# Device information\ndevice.connection_id()    # Get connection identifier\n\n# Device operations (covered in other examples)\ndevice.start_recording()  # Start recording\ndevice.start_streaming()  # Start streaming\ndevice.render_tts(text)   # Text-to-speech\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Learn how to ",(0,s.jsx)(n.a,{href:"/ark/client-sdk/python-sdk/recording-example",children:"control recording"})," with your connected device"]}),"\n",(0,s.jsxs)(n.li,{children:["Explore ",(0,s.jsx)(n.a,{href:"/ark/client-sdk/python-sdk/streaming-example",children:"real-time streaming"})]}),"\n",(0,s.jsxs)(n.li,{children:["Send ",(0,s.jsx)(n.a,{href:"/ark/client-sdk/python-sdk/text-to-speech-example",children:"text-to-speech commands"})]}),"\n",(0,s.jsxs)(n.li,{children:["Review ",(0,s.jsx)(n.a,{href:"/ark/client-sdk/python-sdk/python-interface",children:"all Python SDK examples"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);