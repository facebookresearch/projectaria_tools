"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[890],{7227:(e,n,r)=>{r.r(n),r.d(n,{default:()=>s});r(96540);var a=r(34164);const o={tabItem:"tabItem_Ymn6"};var t=r(74848);function s({children:e,hidden:n,className:r}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,r),hidden:n,children:e})}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var a=r(96540);const o={},t=a.createContext(o);function s(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(t.Provider,{value:n},e.children)}},36190:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"coordinate/3d-coor","title":"3D Coordinate Frame Conventions","description":"This page provides an overview of 3D Coordinate Frame Conventions used for Project Aria glasses, covering:","source":"@site/docs-technical-specs/coordinate/3d-coor.mdx","sourceDirName":"coordinate","slug":"/coordinate/3d-coor","permalink":"/projectaria_tools/gen2/technical-specs/coordinate/3d-coor","draft":false,"unlisted":false,"editUrl":"https://www.internalfb.com/code/fbsource/arvr/projects/ariane/aria_research_kit/projectaria_tools/website/docs-technical-specs/coordinate/3d-coor.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"3D Coordinate Frame Conventions"},"sidebar":"technicalSpecsSidebar","previous":{"title":"2D Image Coordinate System Conventions","permalink":"/projectaria_tools/gen2/technical-specs/coordinate/2d-coor"},"next":{"title":"Central Pupil Frame (CPF) in Aria and `projectaria-tools`","permalink":"/projectaria_tools/gen2/technical-specs/coordinate/cpf-coor"}}');var o=r(74848),t=r(28453),s=r(49489),i=r(7227);const c={sidebar_position:1,title:"3D Coordinate Frame Conventions"},l="3D Coordinate Frame Conventions for Project Aria Glasses",d={},u=[{value:"SE(3) Lie groups",id:"se3-lie-groups",level:2},{value:"A note on sensor naming and motivation",id:"a-note-on-sensor-naming-and-motivation",level:3},{value:"Code",id:"code",level:3},{value:"Camera coordinate system convention",id:"camera-coordinate-system-convention",level:2},{value:"Non-visual sensor coordinate system",id:"non-visual-sensor-coordinate-system",level:2},{value:"The nominal Central Pupil Frame (CPF)",id:"the-nominal-central-pupil-frame-cpf",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"3d-coordinate-frame-conventions-for-project-aria-glasses",children:"3D Coordinate Frame Conventions for Project Aria Glasses"})}),"\n",(0,o.jsx)(n.p,{children:"This page provides an overview of 3D Coordinate Frame Conventions used for Project Aria glasses, covering:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Representation of 6-DoF poses"}),"\n",(0,o.jsx)(n.li,{children:"3D Coordinate frame and system conventions"}),"\n",(0,o.jsx)(n.li,{children:"Non-visual sensor coordinate systems"}),"\n",(0,o.jsx)(n.li,{children:"Central Pupil Frame (CPF)"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"se3-lie-groups",children:"SE(3) Lie groups"}),"\n",(0,o.jsxs)(n.p,{children:["Extrinsics in calibration refer to the 6-DoF pose among the sensors. These 6-DoF poses are represented by SE(3) Lie group. The quaternion part of SE(3) uses Hamilton convention following the ",(0,o.jsx)(n.a,{href:"https://eigen.tuxfamily.org/",children:"Eigen library"}),", in which the exact formula to convert a quaternion to a rotation matrix of the SE(3) can be found ",(0,o.jsx)(n.a,{href:"https://gitlab.com/libeigen/eigen/-/blob/master/Eigen/src/Geometry/Quaternion.h#L821-859",children:"in the Eigen code repository"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["We use the SE3d class in the ",(0,o.jsx)(n.a,{href:"https://github.com/strasdat/Sophus",children:"Sophus Library"})," to represent SE(3) Lie groups, and provide a minimal pybind for the class."]}),"\n",(0,o.jsx)(n.h3,{id:"a-note-on-sensor-naming-and-motivation",children:"A note on sensor naming and motivation"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"T_sensor1_sensor2"})," represents a relative SE(3) transformation from sensor2 frame to sensor1 frame. An easy mnemonic is the chaining principle is: T_",(0,o.jsx)("span",{style:{color:"blue"},children:"sensor1"}),"_",(0,o.jsx)("span",{style:{color:"green"},children:"sensor2"})," * T_",(0,o.jsx)("span",{style:{color:"green"},children:"sensor2"}),"_",(0,o.jsx)("span",{style:{color:"orange"},children:"sensor3"})," * p_",(0,o.jsx)("span",{style:{color:"orange"},children:"sensor3"})," = p_",(0,o.jsx)("span",{style:{color:"blue"},children:"sensor1"})," (where ",(0,o.jsx)(n.code,{children:"p_sensor"})," is a 3D point measured from sensor)."]}),"\n",(0,o.jsx)(n.h3,{id:"code",children:"Code"}),"\n",(0,o.jsxs)(s.default,{groupId:"programming-language",children:[(0,o.jsxs)(i.default,{value:"python",label:"Python",children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"transform_a_b"})," represents a SE(3) rigid transformation from ",(0,o.jsx)(n.code,{children:"b"})," coordinate frame to ",(0,o.jsx)(n.code,{children:"a"})," coordinate frame. ",(0,o.jsx)(n.code,{children:"p_a"})," represents an R^3 point (or vector) in the coordinate system of a.\nEasy mnemonics of the chaining principle (a, b, c are coordinate frames):"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"transform_a_c = transform_a_b @ transform_b_c;\np_a = transform_a_b @ p_b\n"})}),(0,o.jsx)(n.p,{children:"If you want to get quaternion from the SE3d, please notice the order is consistent to numpy"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"quaternion_a_b = transform_a_b.to_quat() # order is w, x, y, z\n"})})]}),(0,o.jsxs)(i.default,{value:"cpp",label:"C++",children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"T_a_b"})," represents a SE(3) rigid transformation from ",(0,o.jsx)(n.code,{children:"b"})," coordinate frame to ",(0,o.jsx)(n.code,{children:"a"})," coordinate frame. ",(0,o.jsx)(n.code,{children:"p_a"})," represents an R^3 point (or vector) in the coordinate system of a.\nEasy mnemonics of the chaining principle (a, b, c are coordinate frames):"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"Sophus::SE3d T_A_C = T_A_B * T_B_C;\nEigen::Vector3d p_A = T_A_B * p_B;\n"})}),(0,o.jsx)(n.p,{children:"If you want to get quaternion from the SE3d, please notice the order in Sophus interface"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"quaternion_a_b = T_a_b.so3().unit_quaternion() # order is x, y, z, w\n"})})]})]}),"\n",(0,o.jsx)(n.h1,{id:"3d-coordinate-frame-conventions",children:"3D Coordinate frame conventions"}),"\n",(0,o.jsxs)(n.p,{children:['Every sensor on Aria glasses has their own local coordinate system. We represent the 6DoF pose of each sensor as the relative pose (rotation and translation) with regard to the  \u201cDevice frame". The device frame is by-default the local frame of the left front-facing SLAM camera (',(0,o.jsx)(n.code,{children:"slam-front-left"}),")."]}),"\n",(0,o.jsx)(n.h2,{id:"camera-coordinate-system-convention",children:"Camera coordinate system convention"}),"\n",(0,o.jsx)(n.p,{children:"A camera's local frame has its origin at the camera's optical center. Coarsely, when the camera is placed up-right, the camera coordinate frame's axes points to left, up and forward."}),"\n",(0,o.jsx)(n.p,{children:"More rigorously, we define a camera's local frame based on the optical axis and the entrance pupil of its lens. Both are uniquely defined for each camera according to the camera's lens prescription. The origin of a camera's local frame is at center of the camera's entrance pupil.\nThe frame's Z axis is aligned with the optical axis. The camera's X axis are aligned with the projection of the image plane's X axis on the entrance pupil plane. The cross-product of the X and Z axis defines the system's Y axis."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Camera 3D coordinate frame",src:r(46225).A+"",width:"2288",height:"716"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Figure 1. Camera 3D Coordinate System"})}),"\n",(0,o.jsx)(n.h2,{id:"non-visual-sensor-coordinate-system",children:"Non-visual sensor coordinate system"}),"\n",(0,o.jsx)(n.p,{children:"We choose the IMU coordinate systems to have their origins at the position of the accelerometer, oriented along the direction of the accelerometer sensitive axis, eventually orthogonalized to compensate for sensor orthogonalities error.\nWe use a similar arrangement for the magnetometer."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"IMU 3D coordinate frame",src:r(48999).A+"",width:"422",height:"335"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Figure 2. IMU 3D Coordinate System"})}),"\n",(0,o.jsx)(n.h2,{id:"the-nominal-central-pupil-frame-cpf",children:"The nominal Central Pupil Frame (CPF)"}),"\n",(0,o.jsxs)(n.p,{children:["The CPF frame is a commonly used coordinate frame in eye tracking or AR / VR applications.\nConventionally, the CPF frame is placed at the midpoint between the eye boxes of the left and right eye, with X-axis points left, Y-axis points up, and the Z-axis points forward, from the person's perspective.\nIn Aria glasses, the CPF frame is only a rough estimation obtained from its CAD design, therefore using CPF-frame-based poses are generally ",(0,o.jsx)(n.strong,{children:"not recommend"}),". Please refer to ",(0,o.jsx)(n.a,{href:"/projectaria_tools/gen2/technical-specs/coordinate/cpf-coor",children:"this page"})," to learn the details."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Central Pupil Frame (CPF) coordinate frame",src:r(89193).A+"",width:"187",height:"260"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Figure 3. IMU 3D coordinate frame"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},46225:(e,n,r)=>{r.d(n,{A:()=>a});const a=r.p+"assets/images/camera_3d_coordinate_frame-8e7eb3a8462f8402724205da4332725a.png"},48999:(e,n,r)=>{r.d(n,{A:()=>a});const a=r.p+"assets/images/imu_coordinate_frame-1e456a82070c01ec3de628d161c4bb1d.png"},49489:(e,n,r)=>{r.r(n),r.d(n,{default:()=>C});var a=r(96540),o=r(34164),t=r(18630),s=r(24245),i=r(56347),c=r(36494),l=r(62814),d=r(45167),u=r(69900);function h(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:r}=e;return(0,a.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:r,default:a}})=>({value:e,label:n,attributes:r,default:a}))}(r);return function(e){const n=(0,d.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function f({queryString:e=!1,groupId:n}){const r=(0,i.W6)(),o=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(o),(0,a.useCallback)(e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})},[o,r])]}function g(e){const{defaultValue:n,queryString:r=!1,groupId:o}=e,t=p(e),[s,i]=(0,a.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:t})),[l,d]=f({queryString:r,groupId:o}),[h,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,o]=(0,u.Dv)(n);return[r,(0,a.useCallback)(e=>{n&&o.set(e)},[n,o])]}({groupId:o}),b=(()=>{const e=l??h;return m({value:e,tabValues:t})?e:null})();(0,c.A)(()=>{b&&i(b)},[b]);return{selectedValue:s,selectValue:(0,a.useCallback)(e=>{if(!m({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);i(e),d(e),g(e)},[d,g,t]),tabValues:t}}var b=r(11062);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=r(74848);function j({className:e,block:n,selectedValue:r,selectValue:a,tabValues:t}){const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),l=e=>{const n=e.currentTarget,o=i.indexOf(n),s=t[o].value;s!==r&&(c(n),a(s))},d=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const r=i.indexOf(e.currentTarget)+1;n=i[r]??i[0];break}case"ArrowLeft":{const r=i.indexOf(e.currentTarget)-1;n=i[r]??i[i.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},e),children:t.map(({value:e,label:n,attributes:a})=>(0,v.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{i.push(e)},onKeyDown:d,onClick:l,...a,className:(0,o.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function y({lazy:e,children:n,selectedValue:r}){const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=t.find(e=>e.props.value===r);return e?(0,a.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:t.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function _(e){const n=g(e);return(0,v.jsxs)("div",{className:(0,o.A)(t.G.tabs.container,"tabs-container",x.tabList),children:[(0,v.jsx)(j,{...n,...e}),(0,v.jsx)(y,{...n,...e})]})}function C(e){const n=(0,b.default)();return(0,v.jsx)(_,{...e,children:h(e.children)},String(n))}},89193:(e,n,r)=>{r.d(n,{A:()=>a});const a=r.p+"assets/images/cpf_coordinate_frame-bdeab7e59eb8f06f4d37f00731956b85.png"}}]);