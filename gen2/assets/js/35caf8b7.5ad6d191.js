"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[2272],{7227:(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});n(96540);var r=n(34164);const s={tabItem:"tabItem_Ymn6"};var i=n(74848);function l({children:e,hidden:t,className:n}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,n),hidden:t,children:e})}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var r=n(96540);const s={},i=r.createContext(s);function l(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:t},e.children)}},49489:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var r=n(96540),s=n(34164),i=n(18630),l=n(24245),a=n(56347),o=n(36494),c=n(62814),d=n(45167),h=n(69900);function u(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)(()=>{const e=t??function(e){return u(e).map(({props:{value:e,label:t,attributes:n,default:r}})=>({value:e,label:t,attributes:n,default:r}))}(n);return function(e){const t=(0,d.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function x({value:e,tabValues:t}){return t.some(t=>t.value===e)}function j({queryString:e=!1,groupId:t}){const n=(0,a.W6)(),s=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,c.aZ)(s),(0,r.useCallback)(e=>{if(!s)return;const t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})},[s,n])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,i=p(e),[l,a]=(0,r.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!x({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find(e=>e.default)??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i})),[c,d]=j({queryString:n,groupId:s}),[u,m]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,s]=(0,h.Dv)(t);return[n,(0,r.useCallback)(e=>{t&&s.set(e)},[t,s])]}({groupId:s}),f=(()=>{const e=c??u;return x({value:e,tabValues:i})?e:null})();(0,o.A)(()=>{f&&a(f)},[f]);return{selectedValue:l,selectValue:(0,r.useCallback)(e=>{if(!x({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);a(e),d(e),m(e)},[d,m,i]),tabValues:i}}var f=n(11062);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(74848);function b({className:e,block:t,selectedValue:n,selectValue:r,tabValues:i}){const a=[],{blockElementScrollPositionUntilNextRender:o}=(0,l.a_)(),c=e=>{const t=e.currentTarget,s=a.indexOf(t),l=i[s].value;l!==n&&(o(t),r(l))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=a.indexOf(e.currentTarget)+1;t=a[n]??a[0];break}case"ArrowLeft":{const n=a.indexOf(e.currentTarget)-1;t=a[n]??a[a.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:i.map(({value:e,label:t,attributes:r})=>(0,g.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{a.push(e)},onKeyDown:d,onClick:c,...r,className:(0,s.A)("tabs__item",v.tabItem,r?.className,{"tabs__item--active":n===e}),children:t??e},e))})}function _({lazy:e,children:t,selectedValue:n}){const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===n);return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))})}function k(e){const t=m(e);return(0,g.jsxs)("div",{className:(0,s.A)(i.G.tabs.container,"tabs-container",v.tabList),children:[(0,g.jsx)(b,{...t,...e}),(0,g.jsx)(_,{...t,...e})]})}function y(e){const t=(0,f.default)();return(0,g.jsx)(k,{...e,children:u(e.children)},String(t))}},68569:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"vrs_health_check/installation","title":"Installation and Quick Start","description":"VRS Health Check is a comprehensive tool for analyzing and validating VRS (Virtual Reality System) recording files collected by Aria devices.","source":"@site/docs-ark/vrs_health_check/installation.mdx","sourceDirName":"vrs_health_check","slug":"/vrs_health_check/installation","permalink":"/projectaria_tools/gen2/ark/vrs_health_check/installation","draft":false,"unlisted":false,"editUrl":"https://www.internalfb.com/code/fbsource/arvr/projects/ariane/aria_research_kit/projectaria_tools/website/docs-ark/vrs_health_check/installation.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Installation and Quick Start"},"sidebar":"arkSidebar","previous":{"title":"Text-to-Speech Example","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/text-to-speech-example"},"next":{"title":"Configurations and Threshold Checks","permalink":"/projectaria_tools/gen2/ark/vrs_health_check/configuration_and_thresholds"}}');var s=n(74848),i=n(28453),l=n(49489),a=n(7227);const o={sidebar_position:1,title:"Installation and Quick Start"},c=void 0,d={},h=[{value:"Installing VRS Health Check",id:"installing-vrs-health-check",level:2},{value:"Quick Start - Running the tool",id:"quick-start---running-the-tool",level:2},{value:"<strong>Available Options</strong>:",id:"available-options",level:2},{value:"\ud83d\udcc1 Basic Options",id:"-basic-options",level:4},{value:"\ud83d\udda5\ufe0f Terminal Output Control",id:"\ufe0f-terminal-output-control",level:4},{value:"\u2699\ufe0f Configuration Management",id:"\ufe0f-configuration-management",level:4},{value:"\ud83d\udd27 Custom Threshold Overrides",id:"-custom-threshold-overrides",level:4},{value:"Expected Outputs",id:"expected-outputs",level:2},{value:"1. Exit Code",id:"1-exit-code",level:3},{value:"2. JSON Results File",id:"2-json-results-file",level:3},{value:"Troubleshoot",id:"troubleshoot",level:2},{value:"<code>run_vrs_health_check</code> exists but running the command emits some error",id:"run_vrs_health_check-exists-but-running-the-command-emits-some-error",level:3}];function u(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"VRS Health Check is a comprehensive tool for analyzing and validating VRS (Virtual Reality System) recording files collected by Aria devices.\nIt performs quality checks on data streams including Camera, IMU, VIO, and GPS, detects issues like dropped frames and sensor misalignments, and provides detailed statistics about recording health."}),"\n",(0,s.jsx)(t.h2,{id:"installing-vrs-health-check",children:"Installing VRS Health Check"}),"\n",(0,s.jsx)(t.p,{children:"Vrs Health Check is available as a Python package on PyPI.\nYou can install it using pip.\nAnd we strongly recommend installing it under a python virtual environment:"}),"\n",(0,s.jsxs)(l.default,{groupId:"operating-systems",children:[(0,s.jsx)(a.default,{value:"unix",label:"Linux & macOS",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"rm -rf $HOME/projectaria_gen2_python_env\npython3 -m venv $HOME/projectaria_gen2_python_env\nsource $HOME/projectaria_gen2_python_env/bin/activate\n\npython3 -m pip install projectaria-vrs-health-check\n"})})}),(0,s.jsx)(a.default,{value:"windows",label:"Windows",children:(0,s.jsx)(t.p,{children:"Windows is not yet supported for Aria-Gen2."})})]}),"\n",(0,s.jsx)(t.h2,{id:"quick-start---running-the-tool",children:"Quick Start - Running the tool"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"run_vrs_health_check --path <VRS_FILE> --output-json <RESULTS_FILE> [OPTIONS]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Note that if the above command emits some error, please refer to the ",(0,s.jsx)(t.a,{href:"#troubleshoot",children:"following troubleshooting section"}),"."]}),"\n",(0,s.jsxs)(t.h2,{id:"available-options",children:[(0,s.jsx)(t.strong,{children:"Available Options"}),":"]}),"\n",(0,s.jsx)(t.h4,{id:"-basic-options",children:"\ud83d\udcc1 Basic Options"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Option"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--path"})}),(0,s.jsx)(t.td,{children:"Path to VRS file or directory containing VRS files"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--output-json"})}),(0,s.jsx)(t.td,{children:"Path to save detailed JSON results"})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"\ufe0f-terminal-output-control",children:"\ud83d\udda5\ufe0f Terminal Output Control"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Option"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--print-stats"})}),(0,s.jsx)(t.td,{children:"Print detailed statistics to console"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--disable-logging"})}),(0,s.jsx)(t.td,{children:"Suppress diagnostic log messages (quiet mode)"})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"\ufe0f-configuration-management",children:"\u2699\ufe0f Configuration Management"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Option"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--list-configurations"})}),(0,s.jsx)(t.td,{children:"List all available threshold configurations"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--show-configuration-json <CONFIG>"})}),(0,s.jsx)(t.td,{children:"Show details of a specific configuration"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--choose-configuration <CONFIG>"})}),(0,s.jsx)(t.td,{children:"Select a configuration to output its results"})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"-custom-threshold-overrides",children:"\ud83d\udd27 Custom Threshold Overrides"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Option"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--override-check-file <FILE>"})}),(0,s.jsx)(t.td,{children:"JSON file with custom threshold overrides"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--override-checks <OVERRIDES>"})}),(0,s.jsx)(t.td,{children:"Comma-separated threshold overrides"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--configuration-to-override <CONFIG>"})}),(0,s.jsx)(t.td,{children:"Base configuration for overrides"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"expected-outputs",children:"Expected Outputs"}),"\n",(0,s.jsx)(t.p,{children:"The VRS Health Check tool provides two primary outputs:"}),"\n",(0,s.jsx)(t.h3,{id:"1-exit-code",children:"1. Exit Code"}),"\n",(0,s.jsx)(t.p,{children:"The tool returns an exit code indicating the overall health check result:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Exit Code"}),(0,s.jsx)(t.th,{children:"Status"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"0"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"PASS"})}),(0,s.jsx)(t.td,{children:"Health check passed successfully"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"WARN"})}),(0,s.jsx)(t.td,{children:"Health check passed with warnings"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"FAIL"})}),(0,s.jsx)(t.td,{children:"Health check failed"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Others"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"64"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"EX_USAGE"})}),(0,s.jsx)(t.td,{children:"Command line usage error"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"66"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"EX_NOINPUT"})}),(0,s.jsx)(t.td,{children:"Cannot open input file or setup failure"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"2-json-results-file",children:"2. JSON Results File"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"--output-json"})," parameter creates a detailed JSON file containing:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Overall status"}),": per-configuration check result : pass / warn / fail."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Failed check list"}),": List of checks that result in ",(0,s.jsx)(t.code,{children:"fail"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Warn check list"}),": List of checks that result in ",(0,s.jsx)(t.code,{children:"warn"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Performed checks with details"}),": Complete list of all performed checks, with\ndetails including value, threshold, and result."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Unperformed checks"}),": List of VRS stream statistics that are computed, but\nnot used for threshold checking."]}),"\n",(0,s.jsx)(t.li,{children:"See the following for an example output json file:"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-JSON",children:'{\n    "AriaGen2_Default": {\n        "final_result": "fail",\n        "failed_checks": [\n            "RGB Camera Class #1.time_error"\n        ],\n        "warn_checks": [],\n        "performed_checks_with_details": {\n            "Ambient Light Sensor (ALS) Data Class #1": {\n                "bad": {\n                    "check_type": "LE",\n                    "fail_threshold": 0.0,\n                    "result": "pass",\n                    "value": 0.0\n                },\n                "end_offset_from_file_us": {\n                    "check_type": "LE",\n                    "fail_threshold": 3000000.0,\n                    "result": "pass",\n                    "value": 14221.0,\n                    "warn_threshold": 1500000.0\n                },\n                "non_monotonic": {\n                    "check_type": "LE",\n                    "fail_threshold": 0.0,\n                    "result": "pass",\n                    "value": 0.0\n                },\n                ...\n            },\n            "Barometer Data Class #1": {\n                "bad": {\n                    "check_type": "LE",\n                    "fail_threshold": 0.0,\n                    "result": "pass",\n                    "value": 0.0\n                },\n                ...\n            },\n            ...\n        },\n        "unperformed_checks": {\n            "Ambient Light Sensor (ALS) Data Class #1": {\n                "dropped": 0,\n                "expected": 368,\n                "largest_deviation_from_period_us": 1577,\n                "processed": 372,\n                "time_error": 0\n            },\n            ...\n        }\n    },\n    "AriaGen2_Location": {\n        "final_result": "fail",\n        "failed_checks": [\n            "RGB Camera Class #1.time_error"\n        ],\n        "warn_checks": [],\n        "performed_checks_with_details": {\n            ...\n        },\n        "unperformed_checks": {\n            ...\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"troubleshoot",children:"Troubleshoot"}),"\n",(0,s.jsxs)(t.h3,{id:"run_vrs_health_check-exists-but-running-the-command-emits-some-error",children:[(0,s.jsx)(t.code,{children:"run_vrs_health_check"})," exists but running the command emits some error"]}),"\n",(0,s.jsxs)(t.p,{children:["This is likely due to that you have previously installed ",(0,s.jsx)(t.code,{children:"projectaria-tools"})," (version < 2.0) python package globally, instead installing in a virtual Python environment.\nThis leads to that the Python tool with the same name ",(0,s.jsx)(t.code,{children:"projectaria_tools"})," becoming a globally visible binary tool."]}),"\n",(0,s.jsx)(t.p,{children:"This can be validated by running:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"which run_vrs_health_check\n"})}),"\n",(0,s.jsxs)(t.p,{children:["if you see it pointing to ",(0,s.jsx)(t.strong,{children:"anywhere other than"})," ",(0,s.jsx)(t.code,{children:"~/$YOUR_NEW_VHC_PYTHON_VENV/bin/run_vrs_health_check"}),", then this is the culprit."]}),"\n",(0,s.jsxs)(t.p,{children:["To resolve, simply upgrade ",(0,s.jsx)(t.code,{children:"projectaria-tools"})," to >= 2.0.0, it will resolve this naming conflict."]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);