"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[8921],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var s=t(96540);const i={},r=s.createContext(i);function c(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:n},e.children)}},84691:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"client-sdk/python-sdk/text-to-speech-example","title":"Text-to-Speech Example","description":"This example demonstrates how to programmatically send text-to-speech (TTS) commands to your Aria Gen2 device using the Python SDK. You can use TTS to provide audio feedback, instructions, or notifications to the device wearer.","source":"@site/docs-ark/client-sdk/python-sdk/text-to-speech-example.mdx","sourceDirName":"client-sdk/python-sdk","slug":"/client-sdk/python-sdk/text-to-speech-example","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/text-to-speech-example","draft":false,"unlisted":false,"editUrl":"https://www.internalfb.com/code/fbsource/arvr/projects/ariane/aria_research_kit/projectaria_tools/website/docs-ark/client-sdk/python-sdk/text-to-speech-example.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Text-to-Speech Example"},"sidebar":"arkSidebar","previous":{"title":"Streaming Example","permalink":"/projectaria_tools/gen2/ark/client-sdk/python-sdk/streaming-example"},"next":{"title":"Installation and Quick Start","permalink":"/projectaria_tools/gen2/ark/vrs_health_check/installation"}}');var i=t(74848),r=t(28453);const c={sidebar_position:5,title:"Text-to-Speech Example"},o="Text-to-Speech Example",l={},d=[{value:"Quick Start",id:"quick-start",level:2},{value:"What This Example Does",id:"what-this-example-does",level:2},{value:"Code Walkthrough",id:"code-walkthrough",level:2},{value:"Step 1: Import Required Modules",id:"step-1-import-required-modules",level:3},{value:"Step 2: Parse Command-Line Arguments",id:"step-2-parse-command-line-arguments",level:3},{value:"Step 3: Connect to Device",id:"step-3-connect-to-device",level:3},{value:"Step 4: Send Text-to-Speech Command",id:"step-4-send-text-to-speech-command",level:3},{value:"Complete Example Code",id:"complete-example-code",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Simple Message",id:"simple-message",level:3},{value:"Multi-Word Message",id:"multi-word-message",level:3},{value:"Instructions",id:"instructions",level:3},{value:"Numbers and Punctuation",id:"numbers-and-punctuation",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"TTS Command Sent But No Audio",id:"tts-command-sent-but-no-audio",level:3},{value:"Connection Lost During TTS",id:"connection-lost-during-tts",level:3},{value:"Next Steps",id:"next-steps",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"text-to-speech-example",children:"Text-to-Speech Example"})}),"\n",(0,i.jsx)(n.p,{children:"This example demonstrates how to programmatically send text-to-speech (TTS) commands to your Aria Gen2 device using the Python SDK. You can use TTS to provide audio feedback, instructions, or notifications to the device wearer."}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.p,{children:"Run the text-to-speech example script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'python ~/Downloads/projectaria_client_sdk_samples_gen2/device_tts.py --text "Hello from Aria"\n'})}),"\n",(0,i.jsx)(n.p,{children:"The device will speak the text through its built-in speakers."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"what-this-example-does",children:"What This Example Does"}),"\n",(0,i.jsx)(n.p,{children:"The script performs the following operations:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Connects to the device"}),"\n",(0,i.jsx)(n.li,{children:"Sends a text-to-speech command with your specified text"}),"\n",(0,i.jsx)(n.li,{children:"The device converts the text to speech and plays it through the speakers"}),"\n",(0,i.jsx)(n.li,{children:"Returns once the command is sent (device plays audio asynchronously)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"code-walkthrough",children:"Code Walkthrough"}),"\n",(0,i.jsx)(n.h3,{id:"step-1-import-required-modules",children:"Step 1: Import Required Modules"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import argparse\nimport aria.sdk_gen2 as sdk_gen2\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-2-parse-command-line-arguments",children:"Step 2: Parse Command-Line Arguments"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def parse_args() -> argparse.Namespace:\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        "--text",\n        dest="text",\n        type=str,\n        default="",\n        required=True,\n        help="TTS text to rendered by the device.",\n    )\n    return parser.parse_args()\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required Argument:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--text"}),": The text string you want the device to speak"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-3-connect-to-device",children:"Step 3: Connect to Device"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'device_client = sdk_gen2.DeviceClient()\nconfig = sdk_gen2.DeviceClientConfig()\ndevice_client.set_client_config(config)\n\ntry:\n    device = device_client.connect()\n    print(f"Connected to device {device.connection_id()}")\nexcept Exception as e:\n    print(f"Failed to connect: {e}")\n    return\n'})}),"\n",(0,i.jsx)(n.p,{children:"This establishes a connection to the first available device."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"step-4-send-text-to-speech-command",children:"Step 4: Send Text-to-Speech Command"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'text = args.text\nprint(f"Sending text-to-speech: \'{text}\'")\ndevice.render_tts(text)\nprint("Text-to-speech command sent successfully")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"render_tts(text)"})," method sends the text to the device"]}),"\n",(0,i.jsx)(n.li,{children:"The device processes the text and generates speech"}),"\n",(0,i.jsx)(n.li,{children:"Audio is played through the device's built-in speakers"}),"\n",(0,i.jsx)(n.li,{children:"The function returns immediately (audio plays asynchronously)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"complete-example-code",children:"Complete Example Code"}),"\n",(0,i.jsx)(n.p,{children:"Here's the full text-to-speech script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import argparse\nimport aria.sdk_gen2 as sdk_gen2\n\n\ndef parse_args() -> argparse.Namespace:\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        "--text",\n        dest="text",\n        type=str,\n        default="",\n        required=True,\n        help="TTS text to rendered by the device.",\n    )\n    return parser.parse_args()\n\n\nif __name__ == "__main__":\n    args = parse_args()\n\n    # Set up the device client to initiate connection to the device\n    device_client = sdk_gen2.DeviceClient()\n    # Set up the device client config to specify the device to be connected to e.g. device serial number.\n    # If nothing is specified, the first device in the list of connected devices will be connected to\n    config = sdk_gen2.DeviceClientConfig()\n\n    device_client.set_client_config(config)\n    device = device_client.connect()\n    print(f"Connected to device: {device.connection_id()}")\n    print(f"Rendering TTS: {args.text}")\n    device.render_tts(text=args.text)\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsx)(n.h3,{id:"simple-message",children:"Simple Message"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'python ~/Downloads/projectaria_client_sdk_samples_gen2/device_tts.py --text "Recording started"\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"multi-word-message",children:"Multi-Word Message"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'python ~/Downloads/projectaria_client_sdk_samples_gen2/device_tts.py --text "Please look at the target"\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"instructions",children:"Instructions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'python ~/Downloads/projectaria_client_sdk_samples_gen2/device_tts.py --text "Turn left at the next intersection"\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"numbers-and-punctuation",children:"Numbers and Punctuation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'python ~/Downloads/projectaria_client_sdk_samples_gen2/device_tts.py --text "You have 3 notifications. Check your device."\n'})}),"\n",(0,i.jsx)(n.p,{children:"The TTS engine handles numbers and punctuation naturally."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"tts-command-sent-but-no-audio",children:"TTS Command Sent But No Audio"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," The ",(0,i.jsx)(n.code,{children:"render_tts()"})," command succeeds but device doesn't speak."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Check device volume:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ensure device audio is not muted"}),"\n",(0,i.jsx)(n.li,{children:"Check volume level in Companion App"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Check device status:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Verify device is powered on and functioning"}),"\n",(0,i.jsx)(n.li,{children:"Check battery level (low battery may affect audio)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Verify connection:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'device = device_client.connect()\nprint(f"Connected: {device.connection_id()}")\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test with simple message:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'device.render_tts("Test")\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"connection-lost-during-tts",children:"Connection Lost During TTS"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Device disconnects when sending TTS."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Verify USB connection"})," is stable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check authentication:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"aria_gen2 auth check\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reconnect if needed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'try:\n    device.render_tts(text)\nexcept Exception as e:\n    print(f"Connection lost: {e}")\n    device = device_client.connect()  # Reconnect\n    device.render_tts(text)  # Retry\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Review ",(0,i.jsx)(n.a,{href:"/ark/client-sdk/python-sdk/python-interface",children:"all Python SDK examples"})]}),"\n",(0,i.jsxs)(n.li,{children:["Learn about ",(0,i.jsx)(n.a,{href:"/ark/client-sdk/python-sdk/recording-example",children:"recording control"})]}),"\n",(0,i.jsxs)(n.li,{children:["Explore ",(0,i.jsx)(n.a,{href:"/ark/client-sdk/python-sdk/streaming-example",children:"streaming with callbacks"})]}),"\n",(0,i.jsxs)(n.li,{children:["Check ",(0,i.jsx)(n.a,{href:"/ark/support/sdk",children:"troubleshooting"})," for common issues"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);