"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[5261],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(96540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}},95240:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"vrs_health_check/configuration_and_thresholds","title":"Configurations and Threshold Checks","description":"VrsHealthCheck has an important feature called","source":"@site/docs-ark/vrs_health_check/configuration_and_thresholds.mdx","sourceDirName":"vrs_health_check","slug":"/vrs_health_check/configuration_and_thresholds","permalink":"/projectaria_tools/gen2/ark/vrs_health_check/configuration_and_thresholds","draft":false,"unlisted":false,"editUrl":"https://www.internalfb.com/code/fbsource/arvr/projects/ariane/aria_research_kit/projectaria_tools/website/docs-ark/vrs_health_check/configuration_and_thresholds.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Configurations and Threshold Checks"},"sidebar":"arkSidebar","previous":{"title":"Installation and Quick Start","permalink":"/projectaria_tools/gen2/ark/vrs_health_check/installation"},"next":{"title":"Customization - Override Check Thresholds","permalink":"/projectaria_tools/gen2/ark/vrs_health_check/customization"}}');var r=s(74848),t=s(28453);const a={sidebar_position:2,title:"Configurations and Threshold Checks"},o="Configuration",l={},c=[{value:"Listing Available Configurations",id:"listing-available-configurations",level:2},{value:"Viewing Configuration Details",id:"viewing-configuration-details",level:2},{value:"Selecting Configuration for Output",id:"selecting-configuration-for-output",level:2},{value:"1. Numeric Checks",id:"1-numeric-checks",level:2},{value:"2. Boolean Checks",id:"2-boolean-checks",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"VrsHealthCheck"})," has an important feature called\n",(0,r.jsx)(n.strong,{children:"check configurations"}),". Each check configuration defines ",(0,r.jsx)(n.strong,{children:"a collection of\ncheck criteria and thresholds"}),".\nThis feature allows a single, unified ",(0,r.jsx)(n.code,{children:"VrsHealthCheck"})," binary to handle all\ndivergent checks, simply by taking different configurations."]}),"\n",(0,r.jsx)(n.p,{children:"Example configurations:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Default Configuration"}),": A baseline health check across all VRS streams,\nfocused on data completeness and detecting hardware, firmware, or OS-level\nfailures."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Algorithm-Specific Configurations"}),": For each algorithm workflow, such as\nlocation, hand tracking, or eye tracking, a distinct set of checks can be\ncreated to assess the suitability of the VRS for running the algorithm. For\nexample, the location configuration might impose stricter requirements on\nSLAM and IMU sensors."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"listing-available-configurations",children:"Listing Available Configurations"}),"\n",(0,r.jsx)(n.p,{children:"To see all available threshold configurations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"run_vrs_health_check --list-configurations\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Available VrsHealthCheck configurations: AriaGen2_Default, AriaGen2_Location, AriaGen1_Default, AriaGen1_Location\n"})}),"\n",(0,r.jsx)(n.h2,{id:"viewing-configuration-details",children:"Viewing Configuration Details"}),"\n",(0,r.jsx)(n.p,{children:"To see the detailed checks and thresholds for a specific configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"run_vrs_health_check --show-configuration-json AriaGen2_Default\n"})}),"\n",(0,r.jsx)(n.p,{children:"This displays the complete JSON structure with all threshold values for that\nconfiguration."}),"\n",(0,r.jsx)(n.h2,{id:"selecting-configuration-for-output",children:"Selecting Configuration for Output"}),"\n",(0,r.jsxs)(n.p,{children:["To control which configuration's results are reported as the final status, use\nthe ",(0,r.jsx)(n.code,{children:"--choose-configuration"})," flag:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"run_vrs_health_check --path recording.vrs \\\n  --output-json results.json \\\n  --choose-configuration AriaGen2_Location\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\u26a0\ufe0f Important Note"}),": The ",(0,r.jsx)(n.code,{children:"--choose-configuration"})," flag ",(0,r.jsx)(n.strong,{children:"does not"})," limit\nwhich configuration's checks are performed. ",(0,r.jsx)(n.strong,{children:"All available configurations are evaluated"})," during\nevery run and the results are reported in the ",(0,r.jsx)(n.code,{children:"output.json"})," file. This flag\nonly controls:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Final Exit Code"}),": Which configuration's result determines the tool's exit\nstatus (PASS/WARN/FAIL)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Terminal Output"}),": Which configuration's detailed results are displayed in\nthe console"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This design ensures you get comprehensive analysis data for all configurations\nwhile allowing you to focus on the specific threshold set most relevant to your\nuse case."}),"\n",(0,r.jsx)(n.h1,{id:"understanding-checks",children:"Understanding Checks"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Checks"})," are quality validation rules applied to VRS data streams. Each check\nevaluates a specific metric against predefined thresholds. There are two\nfundamental types of checks: ",(0,r.jsx)(n.strong,{children:"Numeric Checks"})," and ",(0,r.jsx)(n.strong,{children:"Boolean Checks"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"1-numeric-checks",children:"1. Numeric Checks"}),"\n",(0,r.jsx)(n.p,{children:"Numeric checks compare measured values (like frame rates, error counts, time\nintervals) against numerical thresholds."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Supported Check Types:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"LE"})," (Less than or Equal): Pass if ",(0,r.jsx)(n.code,{children:"measured_value <= threshold"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"LT"})," (Less than): Pass if ",(0,r.jsx)(n.code,{children:"measured_value < threshold"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GE"})," (Greater than or Equal): Pass if ",(0,r.jsx)(n.code,{children:"measured_value >= threshold"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GT"})," (Greater than): Pass if ",(0,r.jsx)(n.code,{children:"measured_value > threshold"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Structure:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "check_type": "LE|LT|GE|GT",\n  "fail_threshold": <number>,     // Optional: value that triggers FAIL\n  "warn_threshold": <number>      // Optional: value that triggers WARN\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Evaluation Logic:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PASS"}),": Value meets all thresholds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"WARN"}),": Value exceeds warn_threshold but not fail_threshold"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FAIL"}),": Value exceeds fail_threshold"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"2-boolean-checks",children:"2. Boolean Checks"}),"\n",(0,r.jsx)(n.p,{children:"Boolean checks verify true/false conditions like calibration validity or file\nintegrity."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Supported Check Types:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"EQ_TRUE"}),": Pass if value is ",(0,r.jsx)(n.code,{children:"true"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"EQ_FALSE"}),": Pass if value is ",(0,r.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Structure:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "check_type": "EQ_TRUE|EQ_FALSE",\n  "fail_if_mismatch": true|false    // Whether mismatch causes FAIL or WARN\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Evaluation Logic:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PASS"}),": Value matches expected boolean"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FAIL/WARN"}),": Value doesn't match (severity depends on ",(0,r.jsx)(n.code,{children:"fail_if_mismatch"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);