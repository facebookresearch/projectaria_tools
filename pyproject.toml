#
# To generate wheels locally for linux run
#    python3 -m cibuildwheel --output-dir dist --platform linux .
# To generate wheels locally for mac x86_64 run
#    python3 -m cibuildwheel --output-dir dist --platform macos --arch x86_64 .
# To generate wheels locally for windows AMD64
#    python3 -m cibuildwheel --output-dir dist --platform windows --arch AMD64 .

[build-system]
requires = [
    "setuptools",
    "wheel",
]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel.linux]
before-build='''
# Update the mirror list for Centos mirror deprecation
sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*

# Install system deps
# Toolchains
yum install -y cmake git gtest-devel \
    lz4-devel libzstd-devel xxhash-devel libpng-devel

# Install and compile libraries
thread=$(nproc)

# Build Fmt
cd /tmp; git clone https://github.com/fmtlib/fmt.git -b 10.2.1 \
    && cd fmt \
    && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE -DFMT_TEST=OFF .; make -j$thread install; rm -rf /tmp/fmt;

cd /tmp && git clone https://github.com/libjpeg-turbo/libjpeg-turbo.git -b 3.0.1 \
    && cd libjpeg-turbo \
    && cmake -DCMAKE_BUILD_TYPE=Release -DWITH_JPEG8=1 -DCMAKE_INSTALL_DEFAULT_PREFIX=/usr .;make -j$thread install; rm -rf /tmp/libjpeg-turbo;

cd /tmp && git clone --recursive https://github.com/boostorg/boost.git -b boost-1.84.0 \
    && cd boost \
    && ./bootstrap.sh \
    && ./b2 --with-system --with-filesystem --with-thread --with-chrono --with-date_time --with-serialization --with-iostreams install \
    && rm -rf /tmp/boost;
'''

[tool.cibuildwheel.macos]
before-build = '''
# Update or install cmake
brew upgrade cmake || brew install cmake

brew install boost fmt glog jpeg-turbo libpng lz4 xxhash zstd
'''
environment = {"CMAKE_ARGS"="-DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++"}

##
# Specifics for Windows platform
##
# VCPKG is used to retrieve and compile static libraries
# To ensure we have a fast build we:
# - are editing x64-windows-static.cmake to build RELEASE only artifacts
# - build only the required boost dependencies (building all boost is slow)
#
# We use VCPKG with a commit HASH containing the fix for CMake 4.0 see https://github.com/microsoft/vcpkg/issues/44507
# We will update to the next available release tag once it is available
##
[tool.cibuildwheel.windows]
environment = {"CMAKE_GENERATOR"="Visual Studio 17 2022"}
before-build = [
"git clone https://github.com/microsoft/vcpkg.git",
"cd vcpkg",
"git checkout 0bde25d4ffc4349ac70a8c22615203eb1201aa4a",
"findstr /c:\"set(VCPKG_BUILD_TYPE release)\" triplets\\x64-windows-static.cmake || echo set(VCPKG_BUILD_TYPE release) >> triplets\\x64-windows-static.cmake",
"bootstrap-vcpkg.bat -disableMetrics",
"vcpkg update",
"vcpkg integrate install",
"vcpkg integrate remove",
"vcpkg install lz4:x64-windows-static",
"vcpkg install zstd:x64-windows-static",
"vcpkg install xxhash:x64-windows-static",
"vcpkg install libpng:x64-windows-static",
"vcpkg install libjpeg-turbo:x64-windows-static",
"vcpkg install fmt:x64-windows-static",
"vcpkg install boost-date-time:x64-windows-static",
"vcpkg install boost-filesystem:x64-windows-static",
"vcpkg install boost-iostreams:x64-windows-static",
"vcpkg install boost-system:x64-windows-static",
"vcpkg install boost-uuid:x64-windows-static",
"vcpkg install boost-interprocess:x64-windows-static",
]
