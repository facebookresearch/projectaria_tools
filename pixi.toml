[project]
name = "projectaria_tools"
description = "projectaria_tools is an C++/Python open-source toolkit to interact with Project Aria data"
homepage = "https://github.com/facebookresearch/projectaria_tools"
license = "Apache-2.0"
channels = ["conda-forge"]
platforms = ["linux-64", "linux-aarch64", "osx-64", "osx-arm64", "win-64"]
version = "1.5.2"

[tasks]
#
# Define a set of task to CLEAN, BUILD, TEST and PACKAGE projectaria_tools
#

#
# CLEAN
clean = "rm -rf ./build ./wheels ./projectaria_tools.egg-info/"

#
# C++ - BUILD and TEST
prepare = "cmake -GNinja -B build -S . -DBUILD_UNIT_TEST=ON -DCMAKE_POLICY_VERSION_MINIMUM=3.5"
build = "cmake --build build --target all"
test = "cd build; ctest -j"

prepare_and_build = { depends-on = ["prepare", "build"] }
build_and_test = { depends-on = ["prepare_and_build", "test"] }
run_c = { depends-on = ["build_and_test"] }

#
# Python - BUILD and TEST
build_python = "CMAKE_GENERATOR=Ninja python -m pip install ."
test_python = """
    export TEST_FOLDER="./data";
    python -m unittest core/python/test/corePyBindTest.py;
    python -m unittest core/python/test/mpsPyBindTest.py;
    python -m unittest core/python/sophus/test/sophusPybindTest.py;"""

run_python = { depends-on = ["build_python", "test_python"]}

#
# Python - PACKAGE
build_python_wheel = "python -m pip wheel . -w wheels"

[target.win-64.tasks]
#
# Deal with windows specifics (prepare and build)
# - Config must be specified for all command lines
#
#
cmake-generator = "cmake --help"
prepare = "cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DBUILD_UNIT_TEST=ON -DCMAKE_POLICY_VERSION_MINIMUM=3.5"
build = "cmake --build build --config Release -- /nologo /verbosity:minimal /maxcpucount"
# --parallel 4 -- /m
test = "cd build; ctest -C Release -j"

build_python = "python -m pip install ."

[build-dependencies]
cmake = "4.0.0.*"
cxx-compiler = "1.9.0.*"
ninja = "1.12.1.*"

[dependencies]
# Note: projectaria_tools gather its own dependencies using CMake Fetch, but
#  - VRS dependency expects some libraries to be available
#  - Unit testing is leveraging installed gtest

# Install UNIT TEST dependencies
gtest = "1.14.0.*"

# Install VRS dependencies
# - Note that some library are listed as '*' so pixi can pick the last compatible set of libraries versions
boost = "1.84.0.*"
fmt = "10.2.1.*"
libjpeg-turbo = "*"
libpng = "*"
lz4 = "*"
xxhash = "*"
zlib = "*"

# Install Python dependencies
python = "3.11.*"
pip = "*"
