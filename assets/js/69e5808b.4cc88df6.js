"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[840],{7227:(e,a,r)=>{r.r(a),r.d(a,{default:()=>s});r(96540);var t=r(34164);const n={tabItem:"tabItem_Ymn6"};var i=r(74848);function s({children:e,hidden:a,className:r}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(n.tabItem,r),hidden:a,children:e})}},21455:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"data_utilities/core_code_snippets/data_provider","title":"Data Provider","description":"In this section, we introduce the Python/C++ API to access sensor data in Project Aria VRS files (projectariatools/main/core/dataprovider).","source":"@site/docs/data_utilities/core_code_snippets/data_provider.mdx","sourceDirName":"data_utilities/core_code_snippets","slug":"/data_utilities/core_code_snippets/data_provider","permalink":"/projectaria_tools/docs/data_utilities/core_code_snippets/data_provider","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/data_utilities/core_code_snippets/data_provider.mdx","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Data Provider"},"sidebar":"tutorialSidebar","previous":{"title":"C++ Visualization","permalink":"/projectaria_tools/docs/data_utilities/visualization/visualization_cpp"},"next":{"title":"Image","permalink":"/projectaria_tools/docs/data_utilities/core_code_snippets/image"}}');var n=r(74848),i=r(28453),s=r(49489),o=r(7227);const l={sidebar_position:10,title:"Data Provider"},d="Aria Data Provider Code Snippets",c={},u=[{value:"Open a VRS file",id:"open-a-vrs-file",level:3},{value:"Mapping between labels and stream ids",id:"mapping-between-labels-and-stream-ids",level:3},{value:"Random access data by index",id:"random-access-data-by-index",level:3},{value:"Random access data by timestamp",id:"random-access-data-by-timestamp",level:3},{value:"Deliver all sensor data in VRS",id:"deliver-all-sensor-data-in-vrs",level:3}];function m(e){const a={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"aria-data-provider-code-snippets",children:"Aria Data Provider Code Snippets"})}),"\n",(0,n.jsxs)(a.p,{children:["In this section, we introduce the Python/C++ API to access sensor data in Project Aria VRS files (",(0,n.jsx)(a.a,{href:"https://github.com/facebookresearch/projectaria_tools/blob/main/core/data_provider",children:"projectaria_tools/main/core/data_provider"}),")."]}),"\n",(0,n.jsx)(a.h3,{id:"open-a-vrs-file",children:"Open a VRS file"}),"\n",(0,n.jsxs)(s.default,{groupId:"programming-language",children:[(0,n.jsx)(o.default,{value:"python",label:"Python",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'from projectaria_tools.core import data_provider\nfrom projectaria_tools.core.sensor_data import TimeDomain, TimeQueryOptions\nfrom projectaria_tools.core.stream_id import RecordableTypeId, StreamId\n\nvrsfile = "example.vrs"\nprovider = data_provider.create_vrs_data_provider(vrsfile)\nassert provider is not None, "Cannot open file"\n'})})}),(0,n.jsx)(o.default,{value:"cpp",label:"C++",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:'#include <dataprovider/VrsDataProvider.h>\nusing namespace projectaria::tools::data_provider;\n\nstd::string vrsfile = "example.vrs"\nauto maybeProvider = createVrsDataProvider(vrsFilename);\nXR_CHECK(maybeProvider, "Cannot open file");\nVrsDataProvider& provider = *maybeProvider;\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"mapping-between-labels-and-stream-ids",children:"Mapping between labels and stream ids"}),"\n",(0,n.jsxs)(s.default,{groupId:"programming-language",children:[(0,n.jsxs)(o.default,{value:"python",label:"Python",children:[(0,n.jsxs)(a.p,{children:["Stream IDs can be mapped from labels by using ",(0,n.jsx)(a.code,{children:"get_stream_id_from_label"}),":"]}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'stream_id = provider.get_stream_id_from_label("camera-slam-left")\n'})}),(0,n.jsxs)(a.p,{children:["Inversely, you can retrieve a label from a stream ID by using ",(0,n.jsx)(a.code,{children:"get_stream_id_from_label"}),":"]}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'label = provider.get_label_from_stream_id(StreamId("1201-1"))\n'})})]}),(0,n.jsxs)(o.default,{value:"cpp",label:"C++",children:[(0,n.jsxs)(a.p,{children:["Stream IDs can be mapped from labels by using ",(0,n.jsx)(a.code,{children:"getStreamIdFromLabel"}),":"]}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:'auto streamId = provider.getStreamIdFromLabel("camera-slam-left");\n'})}),(0,n.jsxs)(a.p,{children:["Inversely, you can retrieve a label from a stream id by using ",(0,n.jsx)(a.code,{children:"getLabelFromStreamId"}),"."]}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:'auto label = provider.getLabelFromStreamId(StreamId::fromNumericalName("1201-1"));\n'})})]})]}),"\n",(0,n.jsx)(a.h3,{id:"random-access-data-by-index",children:"Random access data by index"}),"\n",(0,n.jsxs)(s.default,{groupId:"programming-language",children:[(0,n.jsx)(o.default,{value:"python",label:"Python",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"for stream_id in provider.get_all_streams():\n  for i in range(0, provider.get_num_data(stream_id)):\n    sensor_data =  provider.get_sensor_data_by_index(stream_id, i)\n"})})}),(0,n.jsx)(o.default,{value:"cpp",label:"C++",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:"for (const auto& streamId : provider.getAllStreams()) {\n  for( size_t i =  0 ; i < provider.getNumData(streamId); ++i) {\n    auto sensorData =  provider.getSensorDataByIndex(streamId, i);\n  }\n}\n"})})})]}),"\n",(0,n.jsx)(a.h3,{id:"random-access-data-by-timestamp",children:"Random access data by timestamp"}),"\n",(0,n.jsxs)(a.p,{children:["Project Aria data has four kinds of TimeDomain entries. We strongly recommend always working with ",(0,n.jsx)(a.code,{children:"DEVICE_TIME"})," when using single-device Aria data. The ",(0,n.jsx)(a.code,{children:"TIME_CODE"})," TimeDomain is used when synchronizing time across multiple devices. Go to ",(0,n.jsx)(a.a,{href:"/projectaria_tools/docs/data_formats/aria_vrs/timestamps_in_aria_vrs",children:"Timestamps in Aria VRS Files"})," for more information."]}),"\n",(0,n.jsxs)(s.default,{groupId:"programming-language",children:[(0,n.jsxs)(o.default,{value:"python",label:"Python",children:[(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"TimeDomain.RECORD_TIME"}),"\n",(0,n.jsx)(a.li,{children:"TimeDomain.DEVICE_TIME - recommended"}),"\n",(0,n.jsx)(a.li,{children:"TimeDomain.HOST_TIME"}),"\n",(0,n.jsx)(a.li,{children:"TimeDomain.TIME_CODE - for multiple devices"}),"\n"]}),(0,n.jsx)(a.p,{children:"You can also search using three different time query options:"}),(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:["TimeQueryOptions.BEFORE (default): last data with ",(0,n.jsx)(a.code,{children:"t <= t_query"})]}),"\n",(0,n.jsxs)(a.li,{children:["TimeQueryOptions.AFTER : first data with ",(0,n.jsx)(a.code,{children:"t >= t_query"})]}),"\n",(0,n.jsxs)(a.li,{children:["TimeQueryOptions.CLOSEST : the data where ",(0,n.jsx)(a.code,{children:"|t - t_query|"})," is smallest"]}),"\n"]}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"for stream_id in provider.get_all_streams():\n  t_first = provider.get_first_time_ns(stream_id, TimeDomain.DEVICE_TIME)\n  t_last = provider.get_last_time_ns(stream_id, TimeDomain.DEVICE_TIME)\n  query_timestamp = (t_first + t_last) // 2 # example query timestamp\n  sensor_data = provider.get_sensor_data_by_time_ns(stream_id, query_timestamp, TimeDomain.DEVICE_TIME, TimeQueryOptions.CLOSEST)\n"})})]}),(0,n.jsxs)(o.default,{value:"cpp",label:"C++",children:[(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"TimeDomain::RecordTime"}),"\n",(0,n.jsx)(a.li,{children:"TimeDomain::DeviceTime - recommended"}),"\n",(0,n.jsx)(a.li,{children:"TimeDomain::HostTime"}),"\n",(0,n.jsx)(a.li,{children:"TimeDomain::TimeCode - for multiple devices"}),"\n"]}),(0,n.jsx)(a.p,{children:"You can also search using three different time query options:"}),(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:["TimeQueryOptions::Before : last data with ",(0,n.jsx)(a.code,{children:"t <= t_query"})]}),"\n",(0,n.jsxs)(a.li,{children:["TimeQueryOptions::After : first data with ",(0,n.jsx)(a.code,{children:"t >= t_query"})]}),"\n",(0,n.jsxs)(a.li,{children:["TimeQueryOptions::Closest : the data where ",(0,n.jsx)(a.code,{children:"|t - t_query|"})," is smallest"]}),"\n"]}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:"for (const auto& streamId : provider.getAllStreams()) {\n  int64_t tFirst = provider.getFirstTimeNs(streamId, TimeDomain::DeviceTime);\n  int64_t tLast = provider.getLastTimeNs(streamId, TimeDomain::DeviceTime);\n\n  auto queryTimestamp = (tFirst + tLast) / 2; // example query timestamp\n  auto sensorData = provider.getSensorDataByTimeNs(streamId, queryTimestamp, TimeDomain::DeviceTime, TimeQueryOptions::Closest);\n}\n"})})]})]}),"\n",(0,n.jsx)(a.h3,{id:"deliver-all-sensor-data-in-vrs",children:"Deliver all sensor data in VRS"}),"\n",(0,n.jsxs)(s.default,{groupId:"programming-language",children:[(0,n.jsxs)(o.default,{value:"python",label:"Python",children:[(0,n.jsx)(a.p,{children:"Async iterator to deliver sensor data for all streams in device time order:"}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"for data in provider.deliver_queued_sensor_data():\n  print(data.get_time_ns(TimeDomain.DEVICE_TIME))\n"})}),(0,n.jsx)(a.p,{children:"Alternatively, you can use iterator-type syntax:"}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"seq = provider.deliver_queued_sensor_data()\nobj = next(seq)\nwhile True:\n  print(obj.get_time_ns(TimeDomain.DEVICE_TIME))\n  try:\n    obj = next(seq)\n  except StopIteration:\n    break\n"})}),(0,n.jsx)(a.p,{children:"Deliver with sub-stream selection, time truncation, and frame rate sub-sampling:"}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'# Starts by default options which activates all sensors\ndeliver_option = provider.get_default_deliver_queued_options()\n\n# Only play data from two cameras, also reduce framerate to half of vrs\ndeliver_option.deactivate_stream_all()\nfor label in ["camera-slam-left", "camera-slam-right"]:\n  streamId = provider.get_stream_id_from_label(label)\n  deliver_option.activate_stream(streamId)\n  deliver_option.set_subsample_rate(streamId, 2)\n\n# skip first 100ns\ndeliver_option.set_truncate_first_device_time_ns(100)\nfor data in provider.deliver_queued_sensor_data() :\n  print(data.get_time_ns(TimeDomain.DEVICE_TIME))\n'})})]}),(0,n.jsxs)(o.default,{value:"cpp",label:"C++",children:[(0,n.jsx)(a.p,{children:"Async iterator to deliver sensor data for all streams in device time order:"}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:"for (const SensorData& data : provider.deliverQueuedSensorData()) {\n  std::cout << data.getTimeNs(TimeDomain::DeviceTime) << std::endl;\n}\n"})}),(0,n.jsx)(a.p,{children:"Alternatively, you can use iterator-type syntax:"}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:"auto seq = provider.deliverQueuedSensorData();\nfor (const auto& it = seq.begin(), it != seq.end(); ++it) {\n  SensorData data = *it;\n  std::cout << data.getTimeNs(TimeDomain::DeviceTime) << std::endl;\n}\n"})}),(0,n.jsx)(a.p,{children:"Deliver with sub-stream selection, time truncation, and frame rate sub-sampling:"}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:'// Starts by default options which activates all sensors\ndeliverOption = provider.getDefaultDeliverQueuedOptions();\ndeliverOption.deactivateStreamAll();\n\n// Only play data from two cameras, also reduce framerate to half of vrs\nfor (const auto& label : {"camera-slam-left", "camera-slam-right"}) {\n  std::optional<vrs::StreamId> maybeStreamId = provider.getStreamIdFromLabel(label);\n  if (maybeStreamId) {\n    deliverOption.activateStream(maybeStreamId.value());\n    deliverOption.setSubsampleRate(maybeStreamId.value(), 2);\n  }\n}\n\n// skip first 100ns\ndeliverOption.setTruncateFirstDeviceTimeNs(100);\nfor (const SensorData& data : provider.deliverQueuedSensorData(deliverOption)) {\n  std::cout << data.getTimeNs(TimeDomain::DeviceTime) << std::endl;\n}\n'})})]})]})]})}function p(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},28453:(e,a,r)=>{r.d(a,{R:()=>s,x:()=>o});var t=r(96540);const n={},i=t.createContext(n);function s(e){const a=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),t.createElement(i.Provider,{value:a},e.children)}},49489:(e,a,r)=>{r.r(a),r.d(a,{default:()=>T});var t=r(96540),n=r(34164),i=r(18630),s=r(24245),o=r(56347),l=r(36494),d=r(62814),c=r(45167),u=r(69900);function m(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:a,children:r}=e;return(0,t.useMemo)(()=>{const e=a??function(e){return m(e).map(({props:{value:e,label:a,attributes:r,default:t}})=>({value:e,label:a,attributes:r,default:t}))}(r);return function(e){const a=(0,c.XI)(e,(e,a)=>e.value===a.value);if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[a,r])}function h({value:e,tabValues:a}){return a.some(a=>a.value===e)}function v({queryString:e=!1,groupId:a}){const r=(0,o.W6)(),n=function({queryString:e=!1,groupId:a}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:e,groupId:a});return[(0,d.aZ)(n),(0,t.useCallback)(e=>{if(!n)return;const a=new URLSearchParams(r.location.search);a.set(n,e),r.replace({...r.location,search:a.toString()})},[n,r])]}function _(e){const{defaultValue:a,queryString:r=!1,groupId:n}=e,i=p(e),[s,o]=(0,t.useState)(()=>function({defaultValue:e,tabValues:a}){if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${a.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=a.find(e=>e.default)??a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:i})),[d,c]=v({queryString:r,groupId:n}),[m,_]=function({groupId:e}){const a=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,n]=(0,u.Dv)(a);return[r,(0,t.useCallback)(e=>{a&&n.set(e)},[a,n])]}({groupId:n}),f=(()=>{const e=d??m;return h({value:e,tabValues:i})?e:null})();(0,l.A)(()=>{f&&o(f)},[f]);return{selectedValue:s,selectValue:(0,t.useCallback)(e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),_(e)},[c,_,i]),tabValues:i}}var f=r(11062);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=r(74848);function x({className:e,block:a,selectedValue:r,selectValue:t,tabValues:i}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,s.a_)(),d=e=>{const a=e.currentTarget,n=o.indexOf(a),s=i[n].value;s!==r&&(l(a),t(s))},c=e=>{let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;a=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;a=o[r]??o[o.length-1];break}}a?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.A)("tabs",{"tabs--block":a},e),children:i.map(({value:e,label:a,attributes:t})=>(0,g.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{o.push(e)},onKeyDown:c,onClick:d,...t,className:(0,n.A)("tabs__item",b.tabItem,t?.className,{"tabs__item--active":r===e}),children:a??e},e))})}function j({lazy:e,children:a,selectedValue:r}){const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===r);return e?(0,t.cloneElement)(e,{className:(0,n.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map((e,a)=>(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==r}))})}function y(e){const a=_(e);return(0,g.jsxs)("div",{className:(0,n.A)(i.G.tabs.container,"tabs-container",b.tabList),children:[(0,g.jsx)(x,{...a,...e}),(0,g.jsx)(j,{...a,...e})]})}function T(e){const a=(0,f.default)();return(0,g.jsx)(y,{...e,children:m(e.children)},String(a))}}}]);