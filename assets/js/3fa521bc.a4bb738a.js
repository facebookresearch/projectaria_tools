"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[3036],{24407:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"tech_insights/camera_photometric_and_noise_model","title":"Camera Photometric and Noise Models","description":"This page provides an overview of the Photometric and Noise models used by RGB, Eye Tracking and Mono Scene (aka SLAM) cameras in Project Aria glasses.","source":"@site/docs/tech_insights/camera_photometric_and_noise_model.mdx","sourceDirName":"tech_insights","slug":"/tech_insights/camera_photometric_and_noise_model","permalink":"/projectaria_tools/docs/tech_insights/camera_photometric_and_noise_model","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/tech_insights/camera_photometric_and_noise_model.mdx","tags":[],"version":"current","sidebarPosition":60,"frontMatter":{"sidebar_position":60,"title":"Camera Photometric and Noise Models"},"sidebar":"tutorialSidebar","previous":{"title":"Sensor Measurement Model","permalink":"/projectaria_tools/docs/tech_insights/sensor_measurement_model"},"next":{"title":"IMU Noise Model","permalink":"/projectaria_tools/docs/tech_insights/imu_noise_model"}}');var s=t(74848),n=t(28453);const a={sidebar_position:60,title:"Camera Photometric and Noise Models"},r="Camera Photometric and Noise Models for Project Aria Glasses",c={},l=[{value:"Photometric Models",id:"photometric-models",level:2},{value:"Noise Models",id:"noise-models",level:2}];function d(e){const o={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"camera-photometric-and-noise-models-for-project-aria-glasses",children:"Camera Photometric and Noise Models for Project Aria Glasses"})}),"\n",(0,s.jsx)(o.p,{children:"This page provides an overview of the Photometric and Noise models used by RGB, Eye Tracking and Mono Scene (aka SLAM) cameras in Project Aria glasses."}),"\n",(0,s.jsx)(o.h2,{id:"photometric-models",children:"Photometric Models"}),"\n",(0,s.jsx)(o.p,{children:"In their working distance range, Aria camera lenses are well-focused, i.e. their point spread function is at sub-pixel level. Thus, we can establish a simplified photometric model where each camera pixel collects the photon emitted from a tiny surface area around a corresponding world point."}),"\n",(0,s.jsx)(o.p,{children:"The irradiance of each pixel is attenuated by vignetting. The vignetting of Aria cameras are dominated by two factors (1) cos^4 fall-off (2) mechanical cropping of the lens barrel.\nPoints that falls out of the camera's FOV are not visible, and cannot be applied by the above intrinsic model."}),"\n",(0,s.jsx)(o.p,{children:"Then each pixel takes the time integral of the irradiance, as the sensors collect the arriving photon over the exposure time. The pixel intensity of a non-linear function of the amount of received photons as the ADC transform is non-linear and saturated."}),"\n",(0,s.jsx)(o.h2,{id:"noise-models",children:"Noise Models"}),"\n",(0,s.jsx)(o.p,{children:"The two sources of noise dominating Aria camera sensors are:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:"Shot noise, which accounts for the noise generated due to arrival of photons. Shot noise follows the Poisson distribution."}),"\n",(0,s.jsx)(o.li,{children:"Read noise, which accounts for the noise generated due to ADC conversion, etc. Read noise can be modeled by a zero-mean Gaussian random variable."}),"\n"]})]})}function h(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,o,t)=>{t.d(o,{R:()=>a,x:()=>r});var i=t(96540);const s={},n=i.createContext(s);function a(e){const o=i.useContext(n);return i.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(n.Provider,{value:o},e.children)}}}]);